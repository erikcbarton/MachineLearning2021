# -*- coding: utf-8 -*-
"""ML_HW5.ipynb

Automatically generated by Colaboratory.

Original file is located in Colab

Colab notebook for ML HW5

Erik Barton
"""

import tensorflow as tf
import numpy as np
import os

print("")
print("Performs tensorflow learning.")
print("Warning: Needs a gpu and tensorflow.")
print("")
print("")
print("Please note: you may also want to use the .ipynb file found in this folder to run in google colab.")
print("Warning: performance may vary between runs.")
print("")
print("")

device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))
print("")

# Make the models (note the width is reduced by 1 to account for the bias parameter)
# NOTE: The glorot_uniform is equivelent to the Xavier initalization as per the tensorflow documentation
# RL 3 ############################################
RL_3_5 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(4, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(4, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(1),
])

RL_3_10 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(9, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(9, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(1),
])

RL_3_25 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(24, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(24, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(1),
])

RL_3_50 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(49, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(49, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(1),
])

RL_3_100 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(99, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(99, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(1),
])

# RL 5 ############################################
RL_5_5 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(4, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(4, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(4, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(4, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(1),
])

RL_5_10 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(9, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(9, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(9, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(9, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(1),
])

RL_5_25 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(24, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(24, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(24, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(24, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(1),
])

RL_5_50 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(49, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(49, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(49, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(49, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(1),
])

RL_5_100 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(99, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(99, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(99, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(99, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(1),
])

# RL 9 ############################################

RL_9_5 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(4, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(4, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(4, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(4, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(4, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(4, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(4, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(4, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(1),
])

RL_9_10 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(9, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(9, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(9, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(9, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(9, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(9, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(9, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(9, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(1),
])

RL_9_25 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(24, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(24, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(24, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(24, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(24, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(24, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(24, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(24, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(1),
])

RL_9_50 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(49, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(49, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(49, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(49, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(49, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(49, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(49, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(49, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(1),
])

RL_9_100 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(99, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(99, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(99, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(99, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(99, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(99, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(99, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(99, activation='relu', kernel_initializer='glorot_uniform'),
  tf.keras.layers.Dense(1),
])

# TH 3 ############################################
TH_3_5 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(4, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(4, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(1),
])

TH_3_10 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(9, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(9, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(1),
])

TH_3_25 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(24, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(24, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(1),
])

TH_3_50 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(49, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(49, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(1),
])

TH_3_100 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(99, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(99, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(1),
])

# TH 5 ############################################
TH_5_5 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(4, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(4, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(4, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(4, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(1),
])

TH_5_10 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(9, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(9, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(9, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(9, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(1),
])

TH_5_25 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(24, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(24, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(24, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(24, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(1),
])

TH_5_50 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(49, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(49, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(49, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(49, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(1),
])

TH_5_100 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(99, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(99, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(99, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(99, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(1),
])

# TH 9 ############################################

TH_9_5 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(4, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(4, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(4, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(4, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(4, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(4, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(4, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(4, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(1),
])

TH_9_10 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(9, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(9, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(9, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(9, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(9, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(9, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(9, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(9, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(1),
])

TH_9_25 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(24, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(24, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(24, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(24, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(24, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(24, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(24, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(24, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(1),
])

TH_9_50 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(49, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(49, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(49, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(49, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(49, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(49, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(49, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(49, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(1),
])

TH_9_100 = tf.keras.models.Sequential([
  tf.keras.layers.Dense(99, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(99, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(99, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(99, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(99, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(99, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(99, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(99, activation='tanh', kernel_initializer=tf.keras.initializers.HeNormal()),
  tf.keras.layers.Dense(1),
])


'''
Loads test data from the specified file - expects ',' delim. Adds in a column of 1's as the frist column of S.
'''
def loadDataSy(fileData):
  tempSandY = np.genfromtxt(fileData, dtype=float, delimiter=',')
  S = tempSandY[:,0:-1]
  y = tempSandY[:,-1]
  return S, y

print("")
print("Loading Data")
print("")
script_dir = os.path.dirname(__file__)
start = str(script_dir)
S, y = loadDataSy(start + "/bank-note/bank-note/train.csv")
STest, yTest = loadDataSy(start + "/bank-note/bank-note/test.csv")


def errorReports(modelText, model, S, y, STest, yTest):
  SPred = model.predict(S, verbose=0)
  STestPred = model.predict(STest, verbose=0)

  errorsTrain = 0
  errorsTest = 0

  for i in range(S.shape[0]):
    if SPred[i] >= 0.5 and y[i] < 0.5:
      errorsTrain += 1
    elif SPred[i] < 0.5 and y[i] >= 0.5:
      errorsTrain += 1

  for i in range(STest.shape[0]):
    if STestPred[i] >= 0.5 and yTest[i] < 0.5:
      errorsTest += 1
    elif STestPred[i] < 0.5 and yTest[i] >= 0.5:
      errorsTest += 1

  print(modelText + " Training error: " + str(errorsTrain / S.shape[0]) + " Test error: " + str(errorsTest / STest.shape[0]))

print("Starting ReLU training.")

RL_3_5.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = RL_3_5.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

RL_3_10.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = RL_3_10.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

RL_3_25.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = RL_3_25.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

RL_3_50.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = RL_3_50.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

RL_3_100.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = RL_3_100.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

###############################################

RL_5_5.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = RL_5_5.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

RL_5_10.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = RL_5_10.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

RL_5_25.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = RL_5_25.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

RL_5_50.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = RL_5_50.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

RL_5_100.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = RL_5_100.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

###############################################

RL_9_5.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = RL_9_5.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

RL_9_10.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = RL_9_10.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

RL_9_25.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = RL_9_25.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

RL_9_50.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = RL_9_50.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

RL_9_100.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = RL_9_100.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

print("Completed ReLU training.")
######################################################################################################
print("Starting tanh training.")

TH_3_5.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = TH_3_5.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

TH_3_10.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = TH_3_10.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

TH_3_25.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = TH_3_25.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

TH_3_50.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = TH_3_50.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

TH_3_100.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = TH_3_100.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

###############################################

TH_5_5.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = TH_5_5.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

TH_5_10.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = TH_5_10.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

TH_5_25.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = TH_5_25.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

TH_5_50.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = TH_5_50.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

TH_5_100.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = TH_5_100.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

###############################################

TH_9_5.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = TH_9_5.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

TH_9_10.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = TH_9_10.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

TH_9_25.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = TH_9_25.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

TH_9_50.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = TH_9_50.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

TH_9_100.compile(optimizer=tf.keras.optimizers.Adam(
    learning_rate=1e-3), loss=tf.keras.losses.MeanSquaredError())
with tf.device('/device:GPU:0'):
  history = TH_9_100.fit(S, y, epochs=250, validation_data=(STest, yTest), verbose=0)

print("Completed tanh training.")
print("")

errorReports("ReLU D3 W5", RL_3_5, S, y, STest, yTest)
errorReports("ReLU D3 W10", RL_3_10, S, y, STest, yTest)
errorReports("ReLU D3 W25", RL_3_25, S, y, STest, yTest)
errorReports("ReLU D3 W50", RL_3_50, S, y, STest, yTest)
errorReports("ReLU D3 W100", RL_3_100, S, y, STest, yTest)

errorReports("ReLU D5 W5", RL_5_5, S, y, STest, yTest)
errorReports("ReLU D5 W10", RL_5_10, S, y, STest, yTest)
errorReports("ReLU D5 W25", RL_5_25, S, y, STest, yTest)
errorReports("ReLU D5 W50", RL_5_50, S, y, STest, yTest)
errorReports("ReLU D5 W100", RL_5_100, S, y, STest, yTest)

errorReports("ReLU D9 W5", RL_9_5, S, y, STest, yTest)
errorReports("ReLU D9 W10", RL_9_10, S, y, STest, yTest)
errorReports("ReLU D9 W25", RL_9_25, S, y, STest, yTest)
errorReports("ReLU D9 W50", RL_9_50, S, y, STest, yTest)
errorReports("ReLU D9 W100", RL_9_100, S, y, STest, yTest)
#################################
errorReports("Tanh D3 W5", TH_3_5, S, y, STest, yTest)
errorReports("Tanh D3 W10", TH_3_10, S, y, STest, yTest)
errorReports("Tanh D3 W25", TH_3_25, S, y, STest, yTest)
errorReports("Tanh D3 W50", TH_3_50, S, y, STest, yTest)
errorReports("Tanh D3 W100", TH_3_100, S, y, STest, yTest)

errorReports("Tanh D5 W5", TH_5_5, S, y, STest, yTest)
errorReports("Tanh D5 W10", TH_5_10, S, y, STest, yTest)
errorReports("Tanh D5 W25", TH_5_25, S, y, STest, yTest)
errorReports("Tanh D5 W50", TH_5_50, S, y, STest, yTest)
errorReports("Tanh D5 W100", TH_5_100, S, y, STest, yTest)

errorReports("Tanh D9 W5", TH_9_5, S, y, STest, yTest)
errorReports("Tanh D9 W10", TH_9_10, S, y, STest, yTest)
errorReports("Tanh D9 W25", TH_9_25, S, y, STest, yTest)
errorReports("Tanh D9 W50", TH_9_50, S, y, STest, yTest)
errorReports("Tanh D9 W100", TH_9_100, S, y, STest, yTest)